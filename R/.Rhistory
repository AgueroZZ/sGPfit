L20 <- t(B2sin) %*% Numerical_I %*% Bsin
L21 <- t(B2sin) %*% Numerical_I %*% B1sin
L22 <- t(B2sin) %*% Numerical_I %*% B2sin
### I
I00 <- t(Bsin) %*% Numerical_I %*% Bcos
I10 <- t(B1sin) %*% Numerical_I %*% Bcos
I11 <- t(B1sin) %*% Numerical_I %*% B1cos
I20 <- t(B2sin) %*% Numerical_I %*% Bcos
I21 <- t(B2sin) %*% Numerical_I %*% B1cos
I22 <- t(B2sin) %*% Numerical_I %*% B2cos
### Inner product involving B spline:
BB <- t(Bmatrix) %*% Numerical_I %*% Bmatrix
B2B2 <- t(B2matrix) %*% Numerical_I %*% B2matrix
BB2 <- t(Bmatrix) %*% Numerical_I %*% B2matrix
BS <- t(Bmatrix) %*% Numerical_I %*% Bsin
BC <- t(Bmatrix) %*% Numerical_I %*% Bcos
BS1 <- t(Bmatrix) %*% Numerical_I %*% B1sin
BC1 <- t(Bmatrix) %*% Numerical_I %*% B1cos
BS2 <- t(B2matrix) %*% Numerical_I %*% B2sin
BC2 <- t(B2matrix) %*% Numerical_I %*% B2cos
B2S <- t(B2matrix) %*% Numerical_I %*% Bsin
B2C <- t(B2matrix) %*% Numerical_I %*% Bcos
B2S1 <- t(B2matrix) %*% Numerical_I %*% B1sin
B2C1 <- t(B2matrix) %*% Numerical_I %*% B1cos
B2S2 <- t(B2matrix) %*% Numerical_I %*% B2sin
B2C2 <- t(B2matrix) %*% Numerical_I %*% B2cos
## G = <phi,phj>
G <- rbind(cbind(T00, t(I00), t(BC)), cbind(I00,L00, t(BS)), c(BC,BS,BB))
## C = <D^2phi,D^2phj>
C11 <- T22 - 2*a*ss(I21) - (a^2)*ss(T20) + 2*(a^3)*ss(I10) + 4 * (a^2) * L11 + (a^4)*T00
C22 <- L22 + 2*a*ss(I21) - (a^2)*ss(L20) - 2*(a^3)*ss(I10) + 4 * (a^2) * T11 + (a^4)*L00
C12 <- I22 + 2*a*T21 - (a^2)* ss(I20) - 2*a*t(L21) - 4*(a^2)*I11 + 2*(a^3)*L10 - 2*(a^3)*t(T10) + (a^4)*I00
C13 <- t(B2C2) - 2*a*t(B2S1) - (a^2)*t(B2C)
C23 <- t(B2S2) + 2*a*t(B2C1) - (a^2)*t(B2S)
C33 <- B2B2
C <- rbind(cbind(C11,C12,C13), cbind(t(C12), C22, C23), cbind(t(C13), t(C23), C33))
## M = <phi,D^2phj>
M11 <- t(T20) - (2*a)*t(I10) - (a^2)*T00
M12 <- t(I20) + (2*a)*t(T10) - (a^2)*I00
M21 <- t(I20) - (2*a)*t(L10) - (a^2)*I00
M22 <- t(L20) + (2*a)*t(I10) - (a^2)*L00
M13 <- t(B2C)
M23 <- t(B2S)
M31 <- BC2 - (2*a)*BS1 - (a^2)*BC
M32 <- BS2 + (2*a)*BC1 - (a^2)*BS
M33 <- BB2
M <- rbind(cbind(M11,M12,M13), cbind(M21,M22,M23), cbind(M31,M32,M33))
### Compute the final precision matrix: Q
Q <- (a^4)*G + C + (a^2)*ss(M)
Matrix::forceSymmetric(Q)
}
Compute_Q_BBt(a = 1, k = 5, region = c(0,1))
library(fda)
library(Matrix)
Compute_Q_BBt(a = 1, k = 5, region = c(0,1))
Compute_Q_BBt <- function(a,k,region, accuracy = 0.01, boundary = TRUE){
ss <- function(M) {Matrix::forceSymmetric(M + t(M))}
x <- seq(min(region),max(region),by = accuracy)
if(boundary == TRUE){
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4,
dropind = c(1,2)))
}
else{
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4))
}
Bmatrix <- as(fda::eval.basis(x, B_basis, Lfdobj=0, returnMatrix=TRUE), "dgCMatrix")
B1matrix <-  as(fda::eval.basis(x, B_basis, Lfdobj=1, returnMatrix=TRUE), "dgCMatrix")
B2matrix <-  as(fda::eval.basis(x, B_basis, Lfdobj=2, returnMatrix=TRUE), "dgCMatrix")
cos_matrix <- cos(a*x)
sin_matrix <- sin(a*x)
Bcos <- as(apply(Bmatrix, 2, function(x) x*cos_matrix), "dgCMatrix")
B1cos <- as(apply(B1matrix, 2, function(x) x*cos_matrix), "dgCMatrix")
B2cos <- as(apply(B2matrix, 2, function(x) x*cos_matrix), "dgCMatrix")
Bsin <- as(apply(Bmatrix, 2, function(x) x*sin_matrix), "dgCMatrix")
B1sin <- as(apply(B1matrix, 2, function(x) x*sin_matrix), "dgCMatrix")
B2sin <- as(apply(B2matrix, 2, function(x) x*sin_matrix), "dgCMatrix")
### Compute I, L, T:
Numerical_I <- as(diag(c(diff(c(0,x)))), "dgCMatrix")
### T
T00 <- t(Bcos) %*% Numerical_I %*% Bcos
T10 <- t(B1cos) %*% Numerical_I %*% Bcos
T11 <- t(B1cos) %*% Numerical_I %*% B1cos
T20 <- t(B2cos) %*% Numerical_I %*% Bcos
T21 <- t(B2cos) %*% Numerical_I %*% B1cos
T22 <- t(B2cos) %*% Numerical_I %*% B2cos
### L
L00 <- t(Bsin) %*% Numerical_I %*% Bsin
L10 <- t(B1sin) %*% Numerical_I %*% Bsin
L11 <- t(B1sin) %*% Numerical_I %*% B1sin
L20 <- t(B2sin) %*% Numerical_I %*% Bsin
L21 <- t(B2sin) %*% Numerical_I %*% B1sin
L22 <- t(B2sin) %*% Numerical_I %*% B2sin
### I
I00 <- t(Bsin) %*% Numerical_I %*% Bcos
I10 <- t(B1sin) %*% Numerical_I %*% Bcos
I11 <- t(B1sin) %*% Numerical_I %*% B1cos
I20 <- t(B2sin) %*% Numerical_I %*% Bcos
I21 <- t(B2sin) %*% Numerical_I %*% B1cos
I22 <- t(B2sin) %*% Numerical_I %*% B2cos
### Inner product involving B spline:
BB <- t(Bmatrix) %*% Numerical_I %*% Bmatrix
B2B2 <- t(B2matrix) %*% Numerical_I %*% B2matrix
BB2 <- t(Bmatrix) %*% Numerical_I %*% B2matrix
BS <- t(Bmatrix) %*% Numerical_I %*% Bsin
BC <- t(Bmatrix) %*% Numerical_I %*% Bcos
BS1 <- t(Bmatrix) %*% Numerical_I %*% B1sin
BC1 <- t(Bmatrix) %*% Numerical_I %*% B1cos
BS2 <- t(B2matrix) %*% Numerical_I %*% B2sin
BC2 <- t(B2matrix) %*% Numerical_I %*% B2cos
B2S <- t(B2matrix) %*% Numerical_I %*% Bsin
B2C <- t(B2matrix) %*% Numerical_I %*% Bcos
B2S1 <- t(B2matrix) %*% Numerical_I %*% B1sin
B2C1 <- t(B2matrix) %*% Numerical_I %*% B1cos
B2S2 <- t(B2matrix) %*% Numerical_I %*% B2sin
B2C2 <- t(B2matrix) %*% Numerical_I %*% B2cos
## G = <phi,phj>
G <- rbind(cbind(T00, t(I00), t(BC)), cbind(I00,L00, t(BS)), c(BC,BS,BB))
## C = <D^2phi,D^2phj>
C11 <- T22 - 2*a*ss(I21) - (a^2)*ss(T20) + 2*(a^3)*ss(I10) + 4 * (a^2) * L11 + (a^4)*T00
C22 <- L22 + 2*a*ss(I21) - (a^2)*ss(L20) - 2*(a^3)*ss(I10) + 4 * (a^2) * T11 + (a^4)*L00
C12 <- I22 + 2*a*T21 - (a^2)* ss(I20) - 2*a*t(L21) - 4*(a^2)*I11 + 2*(a^3)*L10 - 2*(a^3)*t(T10) + (a^4)*I00
C13 <- t(B2C2) - 2*a*t(B2S1) - (a^2)*t(B2C)
C23 <- t(B2S2) + 2*a*t(B2C1) - (a^2)*t(B2S)
C33 <- B2B2
C <- rbind(cbind(C11,C12,C13), cbind(t(C12), C22, C23), cbind(t(C13), t(C23), C33))
## M = <phi,D^2phj>
M11 <- t(T20) - (2*a)*t(I10) - (a^2)*T00
M12 <- t(I20) + (2*a)*t(T10) - (a^2)*I00
M21 <- t(I20) - (2*a)*t(L10) - (a^2)*I00
M22 <- t(L20) + (2*a)*t(I10) - (a^2)*L00
M13 <- t(B2C)
M23 <- t(B2S)
M31 <- BC2 - (2*a)*BS1 - (a^2)*BC
M32 <- BS2 + (2*a)*BC1 - (a^2)*BS
M33 <- BB2
M <- rbind(cbind(M11,M12,M13), cbind(M21,M22,M23), cbind(M31,M32,M33))
### Compute the final precision matrix: Q
Q <- (a^4)*G + C + (a^2)*ss(M)
Matrix::forceSymmetric(Q)
}
Compute_Q_BBt(a = 1, k = 5, region = c(0,1))
Compute_Q_BBt <- function(a,k,region, accuracy = 0.01, boundary = TRUE){
ss <- function(M) {Matrix::forceSymmetric(M + t(M))}
x <- seq(min(region),max(region),by = accuracy)
if(boundary == TRUE){
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4,
dropind = c(1,2)))
}
else{
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4))
}
Bmatrix <- fda::eval.basis(x, B_basis, Lfdobj=0, returnMatrix=TRUE)
B1matrix <-  fda::eval.basis(x, B_basis, Lfdobj=1, returnMatrix=TRUE)
B2matrix <-  fda::eval.basis(x, B_basis, Lfdobj=2, returnMatrix=TRUE)
cos_matrix <- cos(a*x)
sin_matrix <- sin(a*x)
Bcos <- as(apply(Bmatrix, 2, function(x) x*cos_matrix), "dgCMatrix")
B1cos <- as(apply(B1matrix, 2, function(x) x*cos_matrix), "dgCMatrix")
B2cos <- as(apply(B2matrix, 2, function(x) x*cos_matrix), "dgCMatrix")
Bsin <- as(apply(Bmatrix, 2, function(x) x*sin_matrix), "dgCMatrix")
B1sin <- as(apply(B1matrix, 2, function(x) x*sin_matrix), "dgCMatrix")
B2sin <- as(apply(B2matrix, 2, function(x) x*sin_matrix), "dgCMatrix")
### Compute I, L, T:
Numerical_I <- as(diag(c(diff(c(0,x)))), "dgCMatrix")
### T
T00 <- t(Bcos) %*% Numerical_I %*% Bcos
T10 <- t(B1cos) %*% Numerical_I %*% Bcos
T11 <- t(B1cos) %*% Numerical_I %*% B1cos
T20 <- t(B2cos) %*% Numerical_I %*% Bcos
T21 <- t(B2cos) %*% Numerical_I %*% B1cos
T22 <- t(B2cos) %*% Numerical_I %*% B2cos
### L
L00 <- t(Bsin) %*% Numerical_I %*% Bsin
L10 <- t(B1sin) %*% Numerical_I %*% Bsin
L11 <- t(B1sin) %*% Numerical_I %*% B1sin
L20 <- t(B2sin) %*% Numerical_I %*% Bsin
L21 <- t(B2sin) %*% Numerical_I %*% B1sin
L22 <- t(B2sin) %*% Numerical_I %*% B2sin
### I
I00 <- t(Bsin) %*% Numerical_I %*% Bcos
I10 <- t(B1sin) %*% Numerical_I %*% Bcos
I11 <- t(B1sin) %*% Numerical_I %*% B1cos
I20 <- t(B2sin) %*% Numerical_I %*% Bcos
I21 <- t(B2sin) %*% Numerical_I %*% B1cos
I22 <- t(B2sin) %*% Numerical_I %*% B2cos
### Inner product involving B spline:
Bmatrix <- as(Bmatrix, "dgCMatrix")
B1matrix <- as(B1matrix, "dgCMatrix")
B2matrix <- as(B2matrix, "dgCMatrix")
BB <- t(Bmatrix) %*% Numerical_I %*% Bmatrix
B2B2 <- t(B2matrix) %*% Numerical_I %*% B2matrix
BB2 <- t(Bmatrix) %*% Numerical_I %*% B2matrix
BS <- t(Bmatrix) %*% Numerical_I %*% Bsin
BC <- t(Bmatrix) %*% Numerical_I %*% Bcos
BS1 <- t(Bmatrix) %*% Numerical_I %*% B1sin
BC1 <- t(Bmatrix) %*% Numerical_I %*% B1cos
BS2 <- t(B2matrix) %*% Numerical_I %*% B2sin
BC2 <- t(B2matrix) %*% Numerical_I %*% B2cos
B2S <- t(B2matrix) %*% Numerical_I %*% Bsin
B2C <- t(B2matrix) %*% Numerical_I %*% Bcos
B2S1 <- t(B2matrix) %*% Numerical_I %*% B1sin
B2C1 <- t(B2matrix) %*% Numerical_I %*% B1cos
B2S2 <- t(B2matrix) %*% Numerical_I %*% B2sin
B2C2 <- t(B2matrix) %*% Numerical_I %*% B2cos
## G = <phi,phj>
G <- rbind(cbind(T00, t(I00), t(BC)), cbind(I00,L00, t(BS)), c(BC,BS,BB))
## C = <D^2phi,D^2phj>
C11 <- T22 - 2*a*ss(I21) - (a^2)*ss(T20) + 2*(a^3)*ss(I10) + 4 * (a^2) * L11 + (a^4)*T00
C22 <- L22 + 2*a*ss(I21) - (a^2)*ss(L20) - 2*(a^3)*ss(I10) + 4 * (a^2) * T11 + (a^4)*L00
C12 <- I22 + 2*a*T21 - (a^2)* ss(I20) - 2*a*t(L21) - 4*(a^2)*I11 + 2*(a^3)*L10 - 2*(a^3)*t(T10) + (a^4)*I00
C13 <- t(B2C2) - 2*a*t(B2S1) - (a^2)*t(B2C)
C23 <- t(B2S2) + 2*a*t(B2C1) - (a^2)*t(B2S)
C33 <- B2B2
C <- rbind(cbind(C11,C12,C13), cbind(t(C12), C22, C23), cbind(t(C13), t(C23), C33))
## M = <phi,D^2phj>
M11 <- t(T20) - (2*a)*t(I10) - (a^2)*T00
M12 <- t(I20) + (2*a)*t(T10) - (a^2)*I00
M21 <- t(I20) - (2*a)*t(L10) - (a^2)*I00
M22 <- t(L20) + (2*a)*t(I10) - (a^2)*L00
M13 <- t(B2C)
M23 <- t(B2S)
M31 <- BC2 - (2*a)*BS1 - (a^2)*BC
M32 <- BS2 + (2*a)*BC1 - (a^2)*BS
M33 <- BB2
M <- rbind(cbind(M11,M12,M13), cbind(M21,M22,M23), cbind(M31,M32,M33))
### Compute the final precision matrix: Q
Q <- (a^4)*G + C + (a^2)*ss(M)
Matrix::forceSymmetric(Q)
}
Compute_Q_BBt(a = 1, k = 5, region = c(0,1))
Compute_Q_Bt <- function(a,k,region, accuracy = 0.01, boundary = TRUE){
ss <- function(M) {Matrix::forceSymmetric(M + t(M))}
x <- seq(min(region),max(region),by = accuracy)
if(boundary == TRUE){
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4,
dropind = c(1,2)))
}
else{
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4))
}
Bmatrix <- fda::eval.basis(x, B_basis, Lfdobj=0, returnMatrix=TRUE)
B1matrix <-  fda::eval.basis(x, B_basis, Lfdobj=1, returnMatrix=TRUE)
B2matrix <-  fda::eval.basis(x, B_basis, Lfdobj=2, returnMatrix=TRUE)
cos_matrix <- cos(a*x)
sin_matrix <- sin(a*x)
Bcos <- as(apply(Bmatrix, 2, function(x) x*cos_matrix), "dgCMatrix")
B1cos <- as(apply(B1matrix, 2, function(x) x*cos_matrix), "dgCMatrix")
B2cos <- as(apply(B2matrix, 2, function(x) x*cos_matrix), "dgCMatrix")
Bsin <- as(apply(Bmatrix, 2, function(x) x*sin_matrix), "dgCMatrix")
B1sin <- as(apply(B1matrix, 2, function(x) x*sin_matrix), "dgCMatrix")
B2sin <- as(apply(B2matrix, 2, function(x) x*sin_matrix), "dgCMatrix")
### Compute I, L, T:
Numerical_I <- as(diag(c(diff(c(0,x)))), "dgCMatrix")
### T
T00 <- t(Bcos) %*% Numerical_I %*% Bcos
T10 <- t(B1cos) %*% Numerical_I %*% Bcos
T11 <- t(B1cos) %*% Numerical_I %*% B1cos
T20 <- t(B2cos) %*% Numerical_I %*% Bcos
T21 <- t(B2cos) %*% Numerical_I %*% B1cos
T22 <- t(B2cos) %*% Numerical_I %*% B2cos
### L
L00 <- t(Bsin) %*% Numerical_I %*% Bsin
L10 <- t(B1sin) %*% Numerical_I %*% Bsin
L11 <- t(B1sin) %*% Numerical_I %*% B1sin
L20 <- t(B2sin) %*% Numerical_I %*% Bsin
L21 <- t(B2sin) %*% Numerical_I %*% B1sin
L22 <- t(B2sin) %*% Numerical_I %*% B2sin
### I
I00 <- t(Bsin) %*% Numerical_I %*% Bcos
I10 <- t(B1sin) %*% Numerical_I %*% Bcos
I11 <- t(B1sin) %*% Numerical_I %*% B1cos
I20 <- t(B2sin) %*% Numerical_I %*% Bcos
I21 <- t(B2sin) %*% Numerical_I %*% B1cos
I22 <- t(B2sin) %*% Numerical_I %*% B2cos
## G = <phi,phj>
G <- rbind(cbind(T00, t(I00)), cbind(I00,L00))
## C = <D^2phi,D^2phj>
C11 <- T22 - 2*a*ss(I21) - (a^2)*ss(T20) + 2*(a^3)*ss(I10) + 4 * (a^2) * L11 + (a^4)*T00
C22 <- L22 + 2*a*ss(I21) - (a^2)*ss(L20) - 2*(a^3)*ss(I10) + 4 * (a^2) * T11 + (a^4)*L00
C12 <- I22 + 2*a*T21 - (a^2)* ss(I20) - 2*a*t(L21) - 4*(a^2)*I11 + 2*(a^3)*L10 - 2*(a^3)*t(T10) + (a^4)*I00
C <- rbind(cbind(C11,C12), cbind(t(C12), C22))
## M = <phi,D^2phj>
M11 <- t(T20) - (2*a)*t(I10) - (a^2)*T00
M12 <- t(I20) + (2*a)*t(T10) - (a^2)*I00
M21 <- t(I20) - (2*a)*t(L10) - (a^2)*I00
M22 <- t(L20) + (2*a)*t(I10) - (a^2)*L00
M <- rbind(cbind(M11,M12), cbind(M21, M22))
### Compute the final precision matrix: Q
Q <- (a^4)*G + C + (a^2)*ss(M)
Matrix::forceSymmetric(Q)
}
Compute_Q_Bt(a = 1, k = 5, region = c(0,1))
Compute_Q_BBt <- function(a,k,region, accuracy = 0.01, boundary = TRUE){
ss <- function(M) {Matrix::forceSymmetric(M + t(M))}
x <- seq(min(region),max(region),by = accuracy)
if(boundary == TRUE){
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4,
dropind = c(1,2)))
}
else{
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4))
}
Bmatrix <- fda::eval.basis(x, B_basis, Lfdobj=0, returnMatrix=TRUE)
B1matrix <-  fda::eval.basis(x, B_basis, Lfdobj=1, returnMatrix=TRUE)
B2matrix <-  fda::eval.basis(x, B_basis, Lfdobj=2, returnMatrix=TRUE)
cos_matrix <- cos(a*x)
sin_matrix <- sin(a*x)
Bcos <- as(apply(Bmatrix, 2, function(x) x*cos_matrix), "dgCMatrix")
B1cos <- as(apply(B1matrix, 2, function(x) x*cos_matrix), "dgCMatrix")
B2cos <- as(apply(B2matrix, 2, function(x) x*cos_matrix), "dgCMatrix")
Bsin <- as(apply(Bmatrix, 2, function(x) x*sin_matrix), "dgCMatrix")
B1sin <- as(apply(B1matrix, 2, function(x) x*sin_matrix), "dgCMatrix")
B2sin <- as(apply(B2matrix, 2, function(x) x*sin_matrix), "dgCMatrix")
### Compute I, L, T:
Numerical_I <- as(diag(c(diff(c(0,x)))), "dgCMatrix")
### T
T00 <- t(Bcos) %*% Numerical_I %*% Bcos
T10 <- t(B1cos) %*% Numerical_I %*% Bcos
T11 <- t(B1cos) %*% Numerical_I %*% B1cos
T20 <- t(B2cos) %*% Numerical_I %*% Bcos
T21 <- t(B2cos) %*% Numerical_I %*% B1cos
T22 <- t(B2cos) %*% Numerical_I %*% B2cos
### L
L00 <- t(Bsin) %*% Numerical_I %*% Bsin
L10 <- t(B1sin) %*% Numerical_I %*% Bsin
L11 <- t(B1sin) %*% Numerical_I %*% B1sin
L20 <- t(B2sin) %*% Numerical_I %*% Bsin
L21 <- t(B2sin) %*% Numerical_I %*% B1sin
L22 <- t(B2sin) %*% Numerical_I %*% B2sin
### I
I00 <- t(Bsin) %*% Numerical_I %*% Bcos
I10 <- t(B1sin) %*% Numerical_I %*% Bcos
I11 <- t(B1sin) %*% Numerical_I %*% B1cos
I20 <- t(B2sin) %*% Numerical_I %*% Bcos
I21 <- t(B2sin) %*% Numerical_I %*% B1cos
I22 <- t(B2sin) %*% Numerical_I %*% B2cos
### Inner product involving B spline:
Bmatrix <- as(Bmatrix, "dgCMatrix")
B1matrix <- as(B1matrix, "dgCMatrix")
B2matrix <- as(B2matrix, "dgCMatrix")
BB <- t(Bmatrix) %*% Numerical_I %*% Bmatrix
B2B2 <- t(B2matrix) %*% Numerical_I %*% B2matrix
BB2 <- t(Bmatrix) %*% Numerical_I %*% B2matrix
BS <- t(Bmatrix) %*% Numerical_I %*% Bsin
BC <- t(Bmatrix) %*% Numerical_I %*% Bcos
BS1 <- t(Bmatrix) %*% Numerical_I %*% B1sin
BC1 <- t(Bmatrix) %*% Numerical_I %*% B1cos
BS2 <- t(B2matrix) %*% Numerical_I %*% B2sin
BC2 <- t(B2matrix) %*% Numerical_I %*% B2cos
B2S <- t(B2matrix) %*% Numerical_I %*% Bsin
B2C <- t(B2matrix) %*% Numerical_I %*% Bcos
B2S1 <- t(B2matrix) %*% Numerical_I %*% B1sin
B2C1 <- t(B2matrix) %*% Numerical_I %*% B1cos
B2S2 <- t(B2matrix) %*% Numerical_I %*% B2sin
B2C2 <- t(B2matrix) %*% Numerical_I %*% B2cos
## G = <phi,phj>
G <- rbind(cbind(T00, t(I00), t(BC)), cbind(I00,L00, t(BS)), c(BC,BS,BB))
## C = <D^2phi,D^2phj>
C11 <- T22 - 2*a*ss(I21) - (a^2)*ss(T20) + 2*(a^3)*ss(I10) + 4 * (a^2) * L11 + (a^4)*T00
C22 <- L22 + 2*a*ss(I21) - (a^2)*ss(L20) - 2*(a^3)*ss(I10) + 4 * (a^2) * T11 + (a^4)*L00
C12 <- I22 + 2*a*T21 - (a^2)* ss(I20) - 2*a*t(L21) - 4*(a^2)*I11 + 2*(a^3)*L10 - 2*(a^3)*t(T10) + (a^4)*I00
C13 <- t(B2C2) - 2*a*t(B2S1) - (a^2)*t(B2C)
C23 <- t(B2S2) + 2*a*t(B2C1) - (a^2)*t(B2S)
C33 <- B2B2
C <- rbind(cbind(C11,C12,C13), cbind(t(C12), C22, C23), cbind(t(C13), t(C23), C33))
## M = <phi,D^2phj>
M11 <- t(T20) - (2*a)*t(I10) - (a^2)*T00
M12 <- t(I20) + (2*a)*t(T10) - (a^2)*I00
M21 <- t(I20) - (2*a)*t(L10) - (a^2)*I00
M22 <- t(L20) + (2*a)*t(I10) - (a^2)*L00
M13 <- t(B2C)
M23 <- t(B2S)
M31 <- BC2 - (2*a)*BS1 - (a^2)*BC
M32 <- BS2 + (2*a)*BC1 - (a^2)*BS
M33 <- BB2
M <- rbind(cbind(M11,M12,M13), cbind(M21,M22,M23), cbind(M31,M32,M33))
### Compute the final precision matrix: Q
Q <- (a^4)*G + C + (a^2)*ss(M)
Matrix::forceSymmetric(Q)
}
Compute_Q_BBt(a = 1, k = 5, region = c(0,1))
Compute_Q_BBt(a = 1, k = 5, region = c(0,1))
Compute_Q_BBt <- function(a,k,region, accuracy = 0.01, boundary = TRUE){
ss <- function(M) {Matrix::forceSymmetric(M + t(M))}
x <- seq(min(region),max(region),by = accuracy)
if(boundary == TRUE){
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4,
dropind = c(1,2)))
}
else{
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4))
}
Bmatrix <- fda::eval.basis(x, B_basis, Lfdobj=0, returnMatrix=TRUE)
B1matrix <-  fda::eval.basis(x, B_basis, Lfdobj=1, returnMatrix=TRUE)
B2matrix <-  fda::eval.basis(x, B_basis, Lfdobj=2, returnMatrix=TRUE)
cos_matrix <- cos(a*x)
sin_matrix <- sin(a*x)
Bcos <- as(apply(Bmatrix, 2, function(x) x*cos_matrix), "dgCMatrix")
B1cos <- as(apply(B1matrix, 2, function(x) x*cos_matrix), "dgCMatrix")
B2cos <- as(apply(B2matrix, 2, function(x) x*cos_matrix), "dgCMatrix")
Bsin <- as(apply(Bmatrix, 2, function(x) x*sin_matrix), "dgCMatrix")
B1sin <- as(apply(B1matrix, 2, function(x) x*sin_matrix), "dgCMatrix")
B2sin <- as(apply(B2matrix, 2, function(x) x*sin_matrix), "dgCMatrix")
### Compute I, L, T:
Numerical_I <- as(diag(c(diff(c(0,x)))), "dgCMatrix")
### T
T00 <- t(Bcos) %*% Numerical_I %*% Bcos
T10 <- t(B1cos) %*% Numerical_I %*% Bcos
T11 <- t(B1cos) %*% Numerical_I %*% B1cos
T20 <- t(B2cos) %*% Numerical_I %*% Bcos
T21 <- t(B2cos) %*% Numerical_I %*% B1cos
T22 <- t(B2cos) %*% Numerical_I %*% B2cos
### L
L00 <- t(Bsin) %*% Numerical_I %*% Bsin
L10 <- t(B1sin) %*% Numerical_I %*% Bsin
L11 <- t(B1sin) %*% Numerical_I %*% B1sin
L20 <- t(B2sin) %*% Numerical_I %*% Bsin
L21 <- t(B2sin) %*% Numerical_I %*% B1sin
L22 <- t(B2sin) %*% Numerical_I %*% B2sin
### I
I00 <- t(Bsin) %*% Numerical_I %*% Bcos
I10 <- t(B1sin) %*% Numerical_I %*% Bcos
I11 <- t(B1sin) %*% Numerical_I %*% B1cos
I20 <- t(B2sin) %*% Numerical_I %*% Bcos
I21 <- t(B2sin) %*% Numerical_I %*% B1cos
I22 <- t(B2sin) %*% Numerical_I %*% B2cos
### Inner product involving B spline:
Bmatrix <- as(Bmatrix, "dgCMatrix")
B1matrix <- as(B1matrix, "dgCMatrix")
B2matrix <- as(B2matrix, "dgCMatrix")
BB <- t(Bmatrix) %*% Numerical_I %*% Bmatrix
B2B2 <- t(B2matrix) %*% Numerical_I %*% B2matrix
BB2 <- t(Bmatrix) %*% Numerical_I %*% B2matrix
BS <- t(Bmatrix) %*% Numerical_I %*% Bsin
BC <- t(Bmatrix) %*% Numerical_I %*% Bcos
BS1 <- t(Bmatrix) %*% Numerical_I %*% B1sin
BC1 <- t(Bmatrix) %*% Numerical_I %*% B1cos
BS2 <- t(B2matrix) %*% Numerical_I %*% B2sin
BC2 <- t(B2matrix) %*% Numerical_I %*% B2cos
B2S <- t(B2matrix) %*% Numerical_I %*% Bsin
B2C <- t(B2matrix) %*% Numerical_I %*% Bcos
B2S1 <- t(B2matrix) %*% Numerical_I %*% B1sin
B2C1 <- t(B2matrix) %*% Numerical_I %*% B1cos
B2S2 <- t(B2matrix) %*% Numerical_I %*% B2sin
B2C2 <- t(B2matrix) %*% Numerical_I %*% B2cos
## G = <phi,phj>
G <- rbind(cbind(T00, t(I00), t(BC)), cbind(I00,L00, t(BS)), cbind(BC,BS,BB))
## C = <D^2phi,D^2phj>
C11 <- T22 - 2*a*ss(I21) - (a^2)*ss(T20) + 2*(a^3)*ss(I10) + 4 * (a^2) * L11 + (a^4)*T00
C22 <- L22 + 2*a*ss(I21) - (a^2)*ss(L20) - 2*(a^3)*ss(I10) + 4 * (a^2) * T11 + (a^4)*L00
C12 <- I22 + 2*a*T21 - (a^2)* ss(I20) - 2*a*t(L21) - 4*(a^2)*I11 + 2*(a^3)*L10 - 2*(a^3)*t(T10) + (a^4)*I00
C13 <- t(B2C2) - 2*a*t(B2S1) - (a^2)*t(B2C)
C23 <- t(B2S2) + 2*a*t(B2C1) - (a^2)*t(B2S)
C33 <- B2B2
C <- rbind(cbind(C11,C12,C13), cbind(t(C12), C22, C23), cbind(t(C13), t(C23), C33))
## M = <phi,D^2phj>
M11 <- t(T20) - (2*a)*t(I10) - (a^2)*T00
M12 <- t(I20) + (2*a)*t(T10) - (a^2)*I00
M21 <- t(I20) - (2*a)*t(L10) - (a^2)*I00
M22 <- t(L20) + (2*a)*t(I10) - (a^2)*L00
M13 <- t(B2C)
M23 <- t(B2S)
M31 <- BC2 - (2*a)*BS1 - (a^2)*BC
M32 <- BS2 + (2*a)*BC1 - (a^2)*BS
M33 <- BB2
M <- rbind(cbind(M11,M12,M13), cbind(M21,M22,M23), cbind(M31,M32,M33))
### Compute the final precision matrix: Q
Q <- (a^4)*G + C + (a^2)*ss(M)
Matrix::forceSymmetric(Q)
}
Compute_Q_BBt(a = 1, k = 5, region = c(0,1))
Compute_Q_BBt(a = 1, k = 10, region = c(0,1))
Compute_B_BBt <- function(x, a, k, region, boundary = TRUE){
if(boundary){
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4,
dropind = c(1,2)))
}
else{
B_basis <- suppressWarnings(fda::create.bspline.basis(rangeval = c(min(region),max(region)),
nbasis = k,
norder = 4))
}
Bmatrix <- fda::eval.basis(x, B_basis, Lfdobj=0, returnMatrix=TRUE)
cos_matrix <- cos(a*x)
sin_matrix <- sin(a*x)
Bcos <- apply(Bmatrix, 2, function(x) x*cos_matrix)
Bsin <- apply(Bmatrix, 2, function(x) x*sin_matrix)
cbind(Bcos, Bsin,Bmatrix)
}
Compute_B_BBt(x = c(1,2,3), a = 1, k = 5, region = c(0,3))
