}
)
test_that("Precision matrices have correct eigenvalues",{
expect_equal(min(eigen(Q, only.values = T)$values)>=0, TRUE)
expect_equal(min(eigen(Q2, only.values = T)$values), 0, tolerance = 0.0001)
}
)
Q <- joint_prec_construct(t_vec = c(0.1,0.2,0.3), a = 1, sd = 1)
expect_equal(dim(Q), c(6,6))
test_that("Dimensions of created matrices are correct",{
expect_equal(dim(Q), c(6,6))
}
)
test_that("Precision matrices have correct eigenvalues",{
expect_equal(min(eigen(Q, only.values = T)$values)>=0, TRUE)
}
)
min(eigen(Q, only.values = T)$values)
expect_equal(min(eigen(Q[c(1,3,5), c(1,3,5)], only.values = T)$values)>=0, TRUE)
test_that("Precision matrices have correct eigenvalues",{
expect_equal(min(eigen(Q, only.values = T)$values)>=0, TRUE)
expect_equal(min(eigen(Q[c(1,3,5), c(1,3,5)], only.values = T)$values)>=0, TRUE)
expect_equal(min(eigen(Q[c(2,4,6), c(2,4,6)], only.values = T)$values)>=0, TRUE)
}
)
Exact <- compute_matrix_given_cov(from = 0.1, to = 0.3, m = 3, K = generate_K_true(1,1))
Exact
solve(Q[c(1,3,5), c(1,3,5)])
compute_matrix_given_cov
solve(Q)[c(1,3,5), c(1,3,5)]
Exact
max(solve(Q)[c(1,3,5), c(1,3,5)] - Exact)
test_that("Covariance matrices match the exact one",{
expect_equal(max(solve(Q)[c(1,3,5), c(1,3,5)] - Exact), 0, tolerance = 0.001)
}
)
library(sGPfit)
library(devtools)
usethis::use_vignette("sGPfit")
browseVignettes("SPCompute")
vignette(package = "SPCompute")
browseVignettes()
library(tidyverse)
library(sGPfit)
?compute_matrix_given_cov
locations <- seq(0.1,1, by = 0.1)
K_true <- generate_K_true(sigma = 1, alpha = 1)
C_True <- compute_matrix_given_cov(from = 0.1, to = 1, m = 10, K = K_true)
samps <- gaussprocess(from = 0.1, to = 1, m = 10, K = K_true)
samps
samps <- gaussprocess(from = 0.1, to = 1, m = 10, K = K_true, m = 10)
samps <- gaussprocess(from = 0.1, to = 1, m = 10, K = K_true, n = 10)
gaussprocess
samps <- gaussprocess(from = 0.1, to = 1, m = 10, K = K_true)
plot(data = samps, xt~t, type = 'l')
samps <- gaussprocess(from = 0.1, to = 1, m = 10, K = K_true)
plot(data = samps, xt~t, type = 'l')
samps <- gaussprocess(from = 0.1, to = 1, m = 10, K = K_true)
plot(data = samps, xt~t, type = 'l')
locations <- seq(0.1,10, by = 0.1)
locations
locations <- seq(0.1,10, by = 0.1)
K_true <- generate_K_true(sigma = 1, alpha = 1)
C_True <- compute_matrix_given_cov(from = 0.1, to = 10, m = 100, K = K_true)
samps <- gaussprocess(from = 0.1, to = 10, m = 100, K = K_true)
plot(data = samps, xt~t, type = 'l')
gaussprocess
Q <- joint_prec_construct(t_vec = locations, a = 1, sd = 1)
samps <- sim_sGP_Var(t = locations, a = 1, sd = 1)
samps
library(sGPfit)
samps <- sim_sGP_Var(t = locations, a = 1, sd = 1)
plot(data = samps, 'function'~t, type = 'l')
samps
samps <- sim_sGP_Var(t = locations, a = 1, sd = 1)
plot(data = samps, function~t, type = 'l')
samps <- sim_sGP_Var(t = locations, a = 1, sd = 1)
plot(samps[,2] ~ samps[,1], type = 'l')
plot(samps[,3] ~ samps[,1], type = 'l')
samps <- sim_sGP_Var(t = locations, a = 1, sd = 1)
plot(samps[,2] ~ samps[,1], type = 'l', ylab = "f", xlab = 't')
plot(samps[,3] ~ samps[,1], type = 'l', ylab = "f'", xlab = 't')
samps <- sampling_from_BT(x = locations, a = 1, k = 20, region = c(0,10), n = 1)
samps
samps <- sampling_from_BT(x = locations, a = 1, k = 20, region = c(0,10), n = 1)
plot(samps[,1]~locations, ylab = "f", xlab = "t")
samps <- sampling_from_BT(x = locations, a = 1, k = 20, region = c(0,10), n = 1)
plot(samps[,1]~locations, ylab = "f", xlab = "t", type = 'l')
devtools::check()
devtools::check()
devtools::release()
devtools::spell_check()
?devtools::spell_check
library(sGPfit)
devtools::spell_check()
devtools::release()
devtools::check_rhub()
devtools::release()
check_rhub()
devtools::check_rhub()
?devtools::check
devtools::check()
devtools::release()
devtools::check_win_devel()
devtools::release()
?sGPfit
?sGPfit::compute_matrix_given_cov
devtools::release()
devtools::release()
usethis::edit_r_buildignore()
devtools::check_rhub()
usethis::use_news_md()
usethis::use_cran_comments()
library(sGPfit)
library(sGPfit)
devtools::release()
spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::check_rhub()
devtools::release()
devtools::release()
library(sGPfit)
library(sGPfit)
library(sGPfit)
library(sGPfit)
sGPfit::Compute_Q_B
library(sGPfit)
library(sGPfit)
library(sGPfit)
library(sGPfit)
library(sGPfit)
devtools::document()
library(sGPfit)
knitr::opts_chunk$set(echo = TRUE)
data <- data.frame(year = seq(1821, 1934, by = 1), logy = log10(as.numeric(lynx)), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
plot(lynx)
require(sGPfit)
require(aghq)
require(TMB)
require(tidyverse)
require(Matrix)
compile(file = "tut.cpp")
dyn.load(dynlib("tut"))
prior_PSD <- list(u = 1, alpha = 0.01)
correction_factor <- sGPfit::compute_d_step_sGPsd(d = 50, a = 2*pi/10)
prior_SD <- list(u = prior_PSD$u/correction_factor, alpha = prior_PSD$alpha)
prior_SD
x <- data$x
a <- 2*pi/10
X <- as(cbind(cos(a*x),sin(a*x),1), "dgTMatrix")
n = length(x)
B <- Matrix::Diagonal(n = 2*n)[,1:(2*n)]
B <- B[seq(1,2*n,by = 2),][, -c(1:2)]
Q <- joint_prec_construct(a = a, t_vec = x[-1], sd = 1)
Q <- as(as(Q, "matrix"),"dgTMatrix")
tmbdat <- list(
# Design matrix
B = B,
X = X,
# Precision matrix
P = Q,
logPdet = as.numeric(determinant(Q, logarithm = T)$modulus),
# Response
y = data$y,
# Prior
u = prior_SD$u,
alpha = prior_SD$alpha,
betaprec = 0.001
)
tmbparams <- list(
W = c(rep(0, (ncol(B) + ncol(X)))),
theta = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "tut",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
fitted_mod <- aghq::marginal_laplace_tmb(ff,5,c(0))
?Compute_B_sB
range(data$x)
B <- Compute_B_sB(x = data$x, a = a, region = range(data$x))
B <- Compute_B_sB(x = data$x, a = a, region = range(data$x), k = 30)
B <- as(B,"dgTMatrix")
Q <- Compute_Q_sB(a = a, k = 30, region = range(data$x))
Q <- as(as(Q, "matrix"),"dgTMatrix")
B <- Compute_B_sB(x = data$x, a = a, region = range(data$x), k = 30)
B <- as(B,"dgTMatrix")
Q <- Compute_Q_sB(a = a, k = 30, region = range(data$x))
Q <- as(as(Q, "matrix"),"dgTMatrix")
tmbdat <- list(
# Design matrix
B = B,
X = X,
# Precision matrix
P = Q,
logPdet = as.numeric(determinant(Q, logarithm = T)$modulus),
# Response
y = data$y,
# Prior
u = prior_SD$u,
alpha = prior_SD$alpha,
betaprec = 0.001
)
tmbparams <- list(
W = c(rep(0, (ncol(B) + ncol(X)))),
theta = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "tut",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
fitted_mod_sB <- aghq::marginal_laplace_tmb(ff,5,c(0))
samps1 <- sample_marginal(fitted_mod, M = 3000)
dim(samps1$samps
)
nrow(samps1$samps)
samps1 <- sample_marginal(fitted_mod, M = 3000)
g_samps <- B %*% samps1$samps[1:ncol(B),] + X %*% samps1$samps[(ncol(B) + 1):nrow(samps1$samps),]
ncol(B)
n = length(x)
B <- Matrix::Diagonal(n = 2*n)[,1:(2*n)]
B <- B[seq(1,2*n,by = 2),][, -c(1:2)]
Q <- joint_prec_construct(a = a, t_vec = x[-1], sd = 1)
Q <- as(as(Q, "matrix"),"dgTMatrix")
samps1 <- sample_marginal(fitted_mod, M = 3000)
g_samps <- B %*% samps1$samps[1:ncol(B),] + X %*% samps1$samps[(ncol(B) + 1):nrow(samps1$samps),]
samps2 <- sample_marginal(fitted_mod_sB, M = 3000)
g_samps_2 <- B2 %*% samps2$samps[1:ncol(B2),] + X %*% samps2$samps[(ncol(B2) + 1):nrow(samps2$samps),]
B2 <- Compute_B_sB(x = data$x, a = a, region = range(data$x), k = 30)
B2 <- as(B2,"dgTMatrix")
Q2 <- Compute_Q_sB(a = a, k = 30, region = range(data$x))
Q2 <- as(as(Q2, "matrix"),"dgTMatrix")
samps2 <- sample_marginal(fitted_mod_sB, M = 3000)
g_samps_2 <- B2 %*% samps2$samps[1:ncol(B2),] + X %*% samps2$samps[(ncol(B2) + 1):nrow(samps2$samps),]
dim(g_samps_2)
g_samps_2[,1]
g_samps_2[,2]
g_samps_2 %>% as.data.frame()
g_samps_2 %>% data.frame()
## Posterior summary:
data.frame(g_samps_2)
## Posterior summary:
data.frame(matrix(g_samps_2))
## Posterior summary:
data.frame(as.matrix(g_samps_2))
## Posterior summary:
data.frame(cbind(x, as.matrix(g_samps_2)))
## Posterior summary:
data.frame(as.matrix(g_samps_2)))
## Posterior summary:
data.frame(as.matrix(g_samps_2))
## Posterior summary:
mean <- data.frame(as.matrix(g_samps_2)) %>% apply(mean, 1)
mean <- apply(as.matrix(g_samps_2), MARGIN = 1, mean)
mean
## Posterior summary:
mean2 <- apply(as.matrix(g_samps_2), MARGIN = 1, mean)
upper2 <- apply(as.matrix(g_samps_2), MARGIN = 1, quantile, p = 0.975)
lower2 <- apply(as.matrix(g_samps_2), MARGIN = 1, quantile, p = 0.025)
## Posterior summary:
mean <- apply(as.matrix(g_samps), MARGIN = 1, mean)
upper <- apply(as.matrix(g_samps), MARGIN = 1, quantile, p = 0.975)
lower <- apply(as.matrix(g_samps), MARGIN = 1, quantile, p = 0.025)
## Plotting
plot(log(data$y) ~ data$x, xlab = "time", ylab = "log(count)")
lines(upper ~ data$x, type = "l", col = "red")
## Plotting
plot(log(data$y) ~ data$x, xlab = "time", ylab = "log(count)")
lines(upper ~ data$x, type = "l", col = "red")
## Plotting
plot(log(data$y) ~ data$x, xlab = "time", ylab = "Posterior of g(x)")
lines(upper ~ data$x, type = "l", col = "red")
upper
mean
lower
## Plotting
plot(log(data$y) ~ data$x, xlab = "time", ylab = "Posterior of g(x)")
lines(upper ~ data$x, type = "l", col = "red", lty = "dashed")
lines(mean ~ data$x, type = "l", col = "blue")
lines(lower ~ data$x, type = "l", col = "red", lty = "dashed")
## Plotting
plot(log(data$y) ~ data$x, xlab = "time", ylab = "Posterior of g(x)", ylim = c(3,10))
## Plotting
plot(log(data$y) ~ data$x, xlab = "time", ylab = "Posterior of g(x)", ylim = c(3,10))
lines(upper ~ data$x, type = "l", col = "red", lty = "dashed")
lines(mean ~ data$x, type = "l", col = "blue")
lines(lower ~ data$x, type = "l", col = "red", lty = "dashed")
## Plotting
plot(log(data$y) ~ data$x, xlab = "time", ylab = "Posterior of g(x)", ylim = c(3.1,9))
lines(upper ~ data$x, type = "l", col = "red", lty = "dashed")
lines(mean ~ data$x, type = "l", col = "blue")
lines(lower ~ data$x, type = "l", col = "red", lty = "dashed")
## Plotting
plot(log(data$y) ~ data$x, xlab = "time", ylab = "Posterior of g(x)", ylim = c(3.1,9))
lines(upper2 ~ data$x, type = "l", col = "red", lty = "dashed")
lines(mean2 ~ data$x, type = "l", col = "blue")
lines(lower2 ~ data$x, type = "l", col = "red", lty = "dashed")
## Posterior of the SD parameter:
prec_marg <- fitted_mod_sB$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg_SK,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
## Posterior of the SD parameter:
prec_marg <- fitted_mod_sB$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
logpostsigma
plot(pdf_transparam ~ transparam, data = logpostsigma, tyoe = 'l')
## Posterior of the SD parameter:
prec_marg <- fitted_mod_sB$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
plot(pdf_transparam ~ transparam, data = logpostsigma, type = 'l')
## Posterior of the SD parameter:
prec_marg <- fitted_mod_sB$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
plot(pdf_transparam ~ transparam, data = logpostsigma, type = 'l', xlab = "SD", ylab = "Post")
## Posterior of the SD parameter:
prec_marg <- fitted_mod$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
plot(pdf_transparam ~ transparam, data = logpostsigma, type = 'l', xlab = "SD", ylab = "Post")
## Posterior of the SD parameter:
prec_marg <- fitted_mod_sB$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
plot(pdf_transparam ~ transparam, data = logpostsigma, type = 'l', xlab = "SD", ylab = "Post")
prior_PSD <- list(u = 0.5, alpha = 0.01)
correction_factor <- sGPfit::compute_d_step_sGPsd(d = 80, a = 2*pi/10)
prior_SD <- list(u = prior_PSD$u/correction_factor, alpha = prior_PSD$alpha)
prior_SD
prior_PSD <- list(u = 0.1, alpha = 0.01)
correction_factor <- sGPfit::compute_d_step_sGPsd(d = 80, a = 2*pi/10)
prior_SD <- list(u = prior_PSD$u/correction_factor, alpha = prior_PSD$alpha)
prior_SD
data <- data.frame(year = seq(1821, 1934, by = 1), logy = log10(as.numeric(lynx)), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
plot(lynx)
n = length(x)
B <- Matrix::Diagonal(n = 2*n)[,1:(2*n)]
B <- B[seq(1,2*n,by = 2),][, -c(1:2)]
Q <- joint_prec_construct(a = a, t_vec = x[-1], sd = 1)
Q <- as(as(Q, "matrix"),"dgTMatrix")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
data <- data.frame(year = seq(1821, 1934, by = 1), logy = log10(as.numeric(lynx)), y = as.numeric(lynx))
data$x <- data$year - min(data$year)
plot(lynx)
require(sGPfit)
require(aghq)
require(TMB)
require(tidyverse)
require(Matrix)
compile(file = "tut.cpp")
dyn.load(dynlib("tut"))
prior_PSD <- list(u = 1, alpha = 0.01)
correction_factor <- sGPfit::compute_d_step_sGPsd(d = 50, a = 2*pi/10)
prior_SD <- list(u = prior_PSD$u/correction_factor, alpha = prior_PSD$alpha)
prior_SD
x <- data$x
a <- 2*pi/10
X <- as(cbind(cos(a*x),sin(a*x),1), "dgTMatrix")
n = length(x)
B <- Matrix::Diagonal(n = 2*n)[,1:(2*n)]
B <- B[seq(1,2*n,by = 2),][, -c(1:2)]
Q <- joint_prec_construct(a = a, t_vec = x[-1], sd = 1)
Q <- as(as(Q, "matrix"),"dgTMatrix")
tmbdat <- list(
# Design matrix
B = B,
X = X,
# Precision matrix
P = Q,
logPdet = as.numeric(determinant(Q, logarithm = T)$modulus),
# Response
y = data$y,
# Prior
u = prior_SD$u,
alpha = prior_SD$alpha,
u_over = prior_PSD$u,
alpha_over = prior_PSD$alpha,
betaprec = 0.001
)
tmbparams <- list(
W = c(rep(0, (ncol(B) + ncol(X) + length(data$y)))),
theta = 0,
theta_over = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "tut",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
fitted_mod <- aghq::marginal_laplace_tmb(ff,5,c(0, 0))
length(data$y)
c(rep(0, (ncol(B) + ncol(X) + length(data$y))))
prior_PSD
compile(file = "tut.cpp")
dyn.load(dynlib("tut"))
prior_PSD <- list(u = 1, alpha = 0.01)
correction_factor <- sGPfit::compute_d_step_sGPsd(d = 50, a = 2*pi/10)
prior_SD <- list(u = prior_PSD$u/correction_factor, alpha = prior_PSD$alpha)
prior_SD
x <- data$x
a <- 2*pi/10
X <- as(cbind(cos(a*x),sin(a*x),1), "dgTMatrix")
n = length(x)
B <- Matrix::Diagonal(n = 2*n)[,1:(2*n)]
B <- B[seq(1,2*n,by = 2),][, -c(1:2)]
Q <- joint_prec_construct(a = a, t_vec = x[-1], sd = 1)
Q <- as(as(Q, "matrix"),"dgTMatrix")
tmbdat <- list(
# Design matrix
B = B,
X = X,
# Precision matrix
P = Q,
logPdet = as.numeric(determinant(Q, logarithm = T)$modulus),
# Response
y = data$y,
# Prior
u = prior_SD$u,
alpha = prior_SD$alpha,
u_over = prior_PSD$u,
alpha_over = prior_PSD$alpha,
betaprec = 0.001
)
tmbparams <- list(
W = c(rep(0, (ncol(B) + ncol(X) + length(data$y)))),
theta = 0,
theta_over = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "tut",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
fitted_mod <- aghq::marginal_laplace_tmb(ff,5,c(0,0))
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "tut",
silent = TRUE
)
ff
ff$fn(0,0)
ff$fn(c(0,0))
warnings()
tmbparams
n
ncol(B)
length(tmbparams$W)
ncol(X)
226 + 114 + 3
compile(file = "tut.cpp")
dyn.load(dynlib("tut"))
prior_PSD <- list(u = 1, alpha = 0.01)
correction_factor <- sGPfit::compute_d_step_sGPsd(d = 50, a = 2*pi/10)
prior_SD <- list(u = prior_PSD$u/correction_factor, alpha = prior_PSD$alpha)
prior_SD
x <- data$x
a <- 2*pi/10
X <- as(cbind(cos(a*x),sin(a*x),1), "dgTMatrix")
n = length(x)
B <- Matrix::Diagonal(n = 2*n)[,1:(2*n)]
B <- B[seq(1,2*n,by = 2),][, -c(1:2)]
Q <- joint_prec_construct(a = a, t_vec = x[-1], sd = 1)
Q <- as(as(Q, "matrix"),"dgTMatrix")
tmbdat <- list(
# Design matrix
B = B,
X = X,
# Precision matrix
P = Q,
logPdet = as.numeric(determinant(Q, logarithm = T)$modulus),
# Response
y = data$y,
# Prior
u = prior_SD$u,
alpha = prior_SD$alpha,
u_over = prior_PSD$u,
alpha_over = prior_PSD$alpha,
betaprec = 0.001
)
tmbparams <- list(
W = c(rep(0, (ncol(B) + ncol(X) + length(data$y)))),
theta = 0,
theta_over = 0
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "tut",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
fitted_mod <- aghq::marginal_laplace_tmb(ff,5,c(0,0))
usethis::use_readme_rmd()
devtools::build_readme()
devtools::build_readme()
